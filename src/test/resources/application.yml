spring:
  docker:
    compose:
      skip-in-tests: false
      lifecycle-management: start_only

  # Configure the redis connection
  data:
    redis:
      host: localhost
      port: 6379 # Use the same port as in docker-compose.yml


  cloud:
    loadbalancer:
      ribbon:
        enabled: false

    gateway:
      server:
        webflux:
          httpclient:
            wiretap: true
          routes:
            - id: orders-route
              uri: http://localhost:${wiremock.server.port:8080}
              predicates:
                - Path=/orders/**
              filters:
                - name: RequestRateLimiter
                  args:
                    redis-rate-limiter.replenishRate: 10
                    redis-rate-limiter.burstCapacity: 20
                    redis-rate-limiter.requestedTokens: 1
                    key-resolver: "#{@ipKeyResolver}"
                    statusCode: TOO_MANY_REQUESTS
                    denyEmptyResponse: false
                - AddRequestHeader=version, 1.0.0

            - id: products-route
              uri: http://localhost:${wiremock.server.port:8080}
              predicates:
                - Path=/products/**
              filters:
                - name: RequestRateLimiter
                  args:
                    redis-rate-limiter.replenishRate: 10
                    redis-rate-limiter.burstCapacity: 20
                    redis-rate-limiter.requestedTokens: 1
                    key-resolver: "#{@ipKeyResolver}"
                    statusCode: TOO_MANY_REQUESTS
                    denyEmptyResponse: false
                - AddRequestHeader=version, 1.0.0

eureka:
  client:
    enabled: false
    register-with-eureka: false
    fetch-registry: false

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    org.springframework.web: DEBUG
    reactor.netty: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: "*"
